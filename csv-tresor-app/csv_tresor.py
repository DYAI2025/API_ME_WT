#!/usr/bin/env python3
"""
CSV-Tresor - Einfache Verschl√ºsselung f√ºr CSV-Dateien
Einfach per Doppelklick starten
"""

import tkinter as tk
from tkinter import ttk, filedialog, messagebox
import os
import base64
from pathlib import Path
from cryptography.fernet import Fernet
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC

class CSVTresor:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("üîí CSV-Tresor - Sichere Verschl√ºsselung")
        self.root.geometry("600x500")
        
        self.current_file = None
        self.is_encrypted_file = False
        
        self.setup_ui()
        self.center_window()
        
    def setup_ui(self):
        """Erstelle die Benutzeroberfl√§che"""
        # Hauptframe
        main_frame = ttk.Frame(self.root, padding="30")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # Titel
        title_label = ttk.Label(main_frame, text="üîí CSV-Tresor", 
                               font=("Arial", 24, "bold"))
        title_label.pack(pady=(0, 10))
        
        subtitle_label = ttk.Label(main_frame, text="Sichere Verschl√ºsselung f√ºr CSV-Dateien", 
                                  font=("Arial", 12))
        subtitle_label.pack(pady=(0, 30))
        
        # Datei-Auswahl Bereich
        file_frame = ttk.LabelFrame(main_frame, text="Datei ausw√§hlen", padding="20")
        file_frame.pack(fill=tk.X, pady=20)
        
        self.file_label = ttk.Label(file_frame, 
                                   text="üìÅ Keine Datei ausgew√§hlt", 
                                   font=("Arial", 12))
        self.file_label.pack(pady=10)
        
        ttk.Button(file_frame, text="üìÇ CSV-Datei ausw√§hlen", 
                  command=self.browse_csv_file, 
                  style="Accent.TButton").pack(pady=5)
        
        ttk.Button(file_frame, text="üîí Verschl√ºsselte Datei ausw√§hlen", 
                  command=self.browse_encrypted_file).pack(pady=5)
        
        # Status
        self.status_label = ttk.Label(main_frame, text="Bereit - Datei ausw√§hlen", 
                                     font=("Arial", 11), foreground="blue")
        self.status_label.pack(pady=15)
        
        # Aktions-Buttons
        button_frame = ttk.Frame(main_frame)
        button_frame.pack(pady=20)
        
        self.encrypt_btn = ttk.Button(button_frame, text="üîí Verschl√ºsseln", 
                                     command=self.encrypt_file, state="disabled",
                                     style="Accent.TButton")
        self.encrypt_btn.pack(side=tk.LEFT, padx=10)
        
        self.decrypt_btn = ttk.Button(button_frame, text="üîì Entschl√ºsseln", 
                                     command=self.decrypt_file, state="disabled",
                                     style="Accent.TButton")
        self.decrypt_btn.pack(side=tk.LEFT, padx=10)
        
        # Info-Bereich
        info_frame = ttk.LabelFrame(main_frame, text="So funktioniert's", padding="15")
        info_frame.pack(fill=tk.X, pady=20)
        
        info_text = """üí° Verschl√ºsseln:
1. CSV-Datei ausw√§hlen
2. "Verschl√ºsseln" klicken
3. Passwort eingeben + best√§tigen
4. Sichere .encrypted Datei wird erstellt

üîì Entschl√ºsseln:
1. .encrypted Datei ausw√§hlen  
2. "Entschl√ºsseln" klicken
3. Passwort eingeben
4. CSV-Datei wird wiederhergestellt"""
        
        ttk.Label(info_frame, text=info_text, 
                 font=("Arial", 10), justify="left").pack()
        
        # Warnung
        warning_frame = ttk.Frame(main_frame)
        warning_frame.pack(fill=tk.X, pady=10)
        
        ttk.Label(warning_frame, text="‚ö†Ô∏è Wichtig: Passwort gut merken - keine Wiederherstellung m√∂glich!", 
                 font=("Arial", 10, "bold"), foreground="red").pack()
        
    def center_window(self):
        """Zentriere das Fenster"""
        self.root.update_idletasks()
        width = self.root.winfo_width()
        height = self.root.winfo_height()
        x = (self.root.winfo_screenwidth() // 2) - (width // 2)
        y = (self.root.winfo_screenheight() // 2) - (height // 2)
        self.root.geometry(f'{width}x{height}+{x}+{y}')
            
    def browse_csv_file(self):
        """CSV-Datei ausw√§hlen"""
        file_path = filedialog.askopenfilename(
            title="CSV-Datei zum Verschl√ºsseln ausw√§hlen",
            filetypes=[
                ("CSV Dateien", "*.csv"),
                ("Text Dateien", "*.txt"),
                ("Alle Dateien", "*.*")
            ]
        )
        if file_path:
            self.load_file(file_path, is_encrypted=False)
            
    def browse_encrypted_file(self):
        """Verschl√ºsselte Datei ausw√§hlen"""
        file_path = filedialog.askopenfilename(
            title="Verschl√ºsselte Datei zum Entschl√ºsseln ausw√§hlen",
            filetypes=[
                ("Verschl√ºsselte Dateien", "*.encrypted"),
                ("Alle Dateien", "*.*")
            ]
        )
        if file_path:
            self.load_file(file_path, is_encrypted=True)
            
    def load_file(self, file_path: str, is_encrypted: bool):
        """Datei laden und UI aktualisieren"""
        self.current_file = file_path
        self.is_encrypted_file = is_encrypted
        filename = Path(file_path).name
        
        if is_encrypted:
            self.file_label.config(text=f"üîí {filename}")
            self.encrypt_btn.config(state="disabled")
            self.decrypt_btn.config(state="normal")
            self.status_label.config(text="Verschl√ºsselte Datei geladen - Entschl√ºsseln m√∂glich", 
                                   foreground="green")
        else:
            self.file_label.config(text=f"üìÑ {filename}")
            self.encrypt_btn.config(state="normal")
            self.decrypt_btn.config(state="disabled")
            self.status_label.config(text="CSV-Datei geladen - Verschl√ºsselung m√∂glich", 
                                   foreground="green")
            
    def get_password(self, title: str, confirm: bool = False) -> str:
        """Passwort-Dialog"""
        dialog = tk.Toplevel(self.root)
        dialog.title(title)
        dialog.geometry("400x250")
        dialog.transient(self.root)
        dialog.grab_set()
        dialog.resizable(False, False)
        
        # Zentriere Dialog
        dialog.update_idletasks()
        x = (dialog.winfo_screenwidth() // 2) - 200
        y = (dialog.winfo_screenheight() // 2) - 125
        dialog.geometry(f'+{x}+{y}')
        
        # Hauptframe
        main_frame = ttk.Frame(dialog, padding="20")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # Titel
        ttk.Label(main_frame, text=title, font=("Arial", 14, "bold")).pack(pady=(0, 20))
        
        # Passwort eingeben
        ttk.Label(main_frame, text="Passwort eingeben:", font=("Arial", 12)).pack(anchor="w")
        password_var = tk.StringVar()
        password_entry = ttk.Entry(main_frame, textvariable=password_var, show="*", width=35, font=("Arial", 11))
        password_entry.pack(pady=(5, 15), fill=tk.X)
        password_entry.focus()
        
        # Passwort best√§tigen (falls n√∂tig)
        confirm_var = None
        if confirm:
            ttk.Label(main_frame, text="Passwort wiederholen:", font=("Arial", 12)).pack(anchor="w")
            confirm_var = tk.StringVar()
            confirm_entry = ttk.Entry(main_frame, textvariable=confirm_var, show="*", width=35, font=("Arial", 11))
            confirm_entry.pack(pady=(5, 15), fill=tk.X)
        
        result = {'password': None}
        
        def on_ok():
            password = password_var.get()
            if not password:
                messagebox.showerror("Fehler", "Bitte Passwort eingeben!")
                return
                
            if confirm:
                if password != confirm_var.get():
                    messagebox.showerror("Fehler", "Passw√∂rter stimmen nicht √ºberein!")
                    return
                    
            result['password'] = password
            dialog.destroy()
            
        def on_cancel():
            dialog.destroy()
            
        # Buttons
        button_frame = ttk.Frame(main_frame)
        button_frame.pack(pady=20)
        
        ttk.Button(button_frame, text="OK", command=on_ok, style="Accent.TButton").pack(side=tk.LEFT, padx=10)
        ttk.Button(button_frame, text="Abbrechen", command=on_cancel).pack(side=tk.LEFT, padx=10)
        
        # Enter f√ºr OK
        password_entry.bind('<Return>', lambda e: on_ok())
        if confirm:
            confirm_entry.bind('<Return>', lambda e: on_ok())
            
        dialog.wait_window()
        return result['password']
        
    def derive_key(self, password: str, salt: bytes) -> bytes:
        """Schl√ºssel aus Passwort ableiten"""
        kdf = PBKDF2HMAC(
            algorithm=hashes.SHA256(),
            length=32,
            salt=salt,
            iterations=100000,
        )
        key = base64.urlsafe_b64encode(kdf.derive(password.encode()))
        return key
        
    def encrypt_file(self):
        """CSV-Datei verschl√ºsseln"""
        if not self.current_file:
            return
            
        self.status_label.config(text="Verschl√ºsselung l√§uft...", foreground="orange")
        self.root.update()
            
        # Passwort abfragen
        password = self.get_password("Passwort f√ºr Verschl√ºsselung", confirm=True)
        if not password:
            self.status_label.config(text="Verschl√ºsselung abgebrochen", foreground="red")
            return
            
        try:
            # Datei lesen
            with open(self.current_file, 'rb') as f:
                data = f.read()
                
            # Salt generieren
            salt = os.urandom(16)
            
            # Schl√ºssel ableiten
            key = self.derive_key(password, salt)
            fernet = Fernet(key)
            
            # Verschl√ºsseln
            encrypted_data = fernet.encrypt(data)
            
            # Speicherort w√§hlen
            output_path = filedialog.asksaveasfilename(
                title="Verschl√ºsselte Datei speichern",
                defaultextension=".encrypted",
                filetypes=[("Verschl√ºsselte Dateien", "*.encrypted")],
                initialname=Path(self.current_file).stem + ".encrypted"
            )
            
            if output_path:
                with open(output_path, 'wb') as f:
                    f.write(salt + encrypted_data)
                    
                self.status_label.config(text=f"‚úÖ Erfolgreich verschl√ºsselt!", foreground="green")
                messagebox.showinfo("Erfolg", 
                    f"Datei wurde verschl√ºsselt gespeichert!\n\n"
                    f"üìÅ Datei: {Path(output_path).name}\n"
                    f"üîí Zum √ñffnen wird das gleiche Passwort ben√∂tigt.\n\n"
                    f"‚ö†Ô∏è Passwort gut merken - keine Wiederherstellung m√∂glich!")
            else:
                self.status_label.config(text="Verschl√ºsselung abgebrochen", foreground="red")
                    
        except Exception as e:
            self.status_label.config(text="‚ùå Fehler bei der Verschl√ºsselung", foreground="red")
            messagebox.showerror("Fehler", f"Verschl√ºsselung fehlgeschlagen:\n{str(e)}")
            
    def decrypt_file(self):
        """Verschl√ºsselte Datei entschl√ºsseln"""
        if not self.current_file:
            return
            
        self.status_label.config(text="Entschl√ºsselung l√§uft...", foreground="orange")
        self.root.update()
            
        # Passwort abfragen
        password = self.get_password("Passwort zum Entschl√ºsseln")
        if not password:
            self.status_label.config(text="Entschl√ºsselung abgebrochen", foreground="red")
            return
            
        try:
            # Verschl√ºsselte Datei lesen
            with open(self.current_file, 'rb') as f:
                data = f.read()
                
            # Salt und verschl√ºsselte Daten trennen
            salt = data[:16]
            encrypted_data = data[16:]
            
            # Schl√ºssel ableiten
            key = self.derive_key(password, salt)
            fernet = Fernet(key)
            
            # Entschl√ºsseln
            decrypted_data = fernet.decrypt(encrypted_data)
            
            # Speicherort w√§hlen
            output_path = filedialog.asksaveasfilename(
                title="Entschl√ºsselte CSV speichern",
                defaultextension=".csv",
                filetypes=[("CSV Dateien", "*.csv")],
                initialname=Path(self.current_file).stem + ".csv"
            )
            
            if output_path:
                with open(output_path, 'wb') as f:
                    f.write(decrypted_data)
                    
                self.status_label.config(text=f"‚úÖ Erfolgreich entschl√ºsselt!", foreground="green")
                messagebox.showinfo("Erfolg", 
                    f"Datei wurde entschl√ºsselt gespeichert!\n\n"
                    f"üìÅ Datei: {Path(output_path).name}")
            else:
                self.status_label.config(text="Entschl√ºsselung abgebrochen", foreground="red")
                    
        except Exception as e:
            self.status_label.config(text="‚ùå Fehler beim Entschl√ºsseln", foreground="red")
            if "InvalidToken" in str(e):
                messagebox.showerror("Falsches Passwort", 
                    "Das eingegebene Passwort ist falsch!\n\n"
                    "Bitte versuchen Sie es erneut.")
            else:
                messagebox.showerror("Fehler", f"Entschl√ºsselung fehlgeschlagen:\n{str(e)}")
                
    def run(self):
        """GUI starten"""
        self.root.mainloop()

if __name__ == "__main__":
    app = CSVTresor()
    app.run() 