#!/usr/bin/env python3
"""
Build script f√ºr Enhanced Security Tax Calculator
Erstellt Windows .exe und Mac .app mit Doppelklick-Funktionalit√§t
"""

import os
import sys
import subprocess
import shutil
from pathlib import Path

def build_secure_tax_calculator():
    """Build standalone executable mit Enhanced Security"""
    
    print("üî® Baue Enhanced Security Tax Calculator...")
    
    # Stelle sicher, dass wir im richtigen Verzeichnis sind
    script_dir = Path(__file__).parent
    os.chdir(script_dir)
    
    # Check if secure version exists
    if not Path("tax_calculator_secure.py").exists():
        print("‚ùå tax_calculator_secure.py nicht gefunden!")
        return False
    
    # PyInstaller command f√ºr maximale Kompatibilit√§t
    pyinstaller_cmd = [
        sys.executable, "-m", "PyInstaller",
        "--onefile",
        "--windowed",  # Wichtig f√ºr Windows Doppelklick
        "--name", "TaxCalculatorSecure",
        "--distpath", "dist_secure",
        "--workpath", "build_secure",
        "--specpath", ".",
        "--hidden-import", "cryptography",
        "--hidden-import", "cryptography.hazmat.primitives.kdf.scrypt",
        "--hidden-import", "cryptography.hazmat.primitives.kdf.pbkdf2",
        "--hidden-import", "cryptography.fernet",
        "--hidden-import", "secrets",
        "--hidden-import", "hashlib",
        "--clean",
        "tax_calculator_secure.py"
    ]
    
    try:
        # F√ºhre PyInstaller aus
        print("üîß F√ºhre PyInstaller aus...")
        subprocess.run(pyinstaller_cmd, check=True)
        
        print("‚úÖ Build erfolgreich!")
        
        # Kopiere die ausf√ºhrbare Datei
        if sys.platform == "win32":
            exe_path = Path("dist_secure/TaxCalculatorSecure.exe")
            final_path = Path("TaxCalculatorSecure.exe")
            print("ü™ü Windows .exe wird erstellt...")
        elif sys.platform == "darwin":
            exe_path = Path("dist_secure/TaxCalculatorSecure.app")
            final_path = Path("TaxCalculatorSecure.app")
            print("üçé macOS .app wird erstellt...")
        else:
            exe_path = Path("dist_secure/TaxCalculatorSecure")
            final_path = Path("TaxCalculatorSecure")
            print("üêß Linux Binary wird erstellt...")
            
        if exe_path.exists():
            # Entferne alte Version falls vorhanden
            if final_path.exists():
                if final_path.is_dir():
                    shutil.rmtree(final_path)
                else:
                    final_path.unlink()
                    
            shutil.move(str(exe_path), str(final_path))
            
            # Setze Ausf√ºhrungsrechte f√ºr Unix-Systeme
            if sys.platform != "win32":
                os.chmod(final_path, 0o755)
            
            file_size = final_path.stat().st_size / (1024 * 1024)  # MB
            print(f"üì¶ Standalone-Anwendung erstellt: {final_path}")
            print(f"üìè Dateigr√∂√üe: {file_size:.1f} MB")
            
            # Aufr√§umen
            shutil.rmtree("build_secure", ignore_errors=True)
            shutil.rmtree("dist_secure", ignore_errors=True)
            if os.path.exists("TaxCalculatorSecure.spec"):
                os.remove("TaxCalculatorSecure.spec")
                
            print("üßπ Tempor√§re Build-Dateien entfernt")
            
            # Windows-spezifische Anweisungen
            if sys.platform == "win32":
                print("\nü™ü Windows-Hinweise:")
                print("   ‚Ä¢ Doppelklick auf TaxCalculatorSecure.exe zum Starten")
                print("   ‚Ä¢ Funktioniert ohne Python-Installation")
                print("   ‚Ä¢ Windows Defender k√∂nnte warnen (normal bei unsigned .exe)")
                
            return True
        else:
            print("‚ùå Ausf√ºhrbare Datei nicht gefunden!")
            return False
            
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Build fehlgeschlagen: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Unerwarteter Fehler: {e}")
        return False

def test_security_features():
    """Teste die Sicherheitsfeatures"""
    print("\nüîí Teste Sicherheitsfeatures...")
    
    try:
        # Test Scrypt availability
        from cryptography.hazmat.primitives.kdf.scrypt import Scrypt
        print("‚úÖ Scrypt KDF verf√ºgbar")
        
        # Test secrets module
        import secrets
        test_salt = secrets.token_bytes(32)
        print(f"‚úÖ Kryptographisch sicherer Zufallsgenerator: {len(test_salt)} bytes")
        
        # Test enhanced algorithms
        from cryptography.hazmat.primitives import hashes
        from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
        print("‚úÖ PBKDF2 mit SHA256 verf√ºgbar")
        
        print("‚úÖ Alle Sicherheitsfeatures verf√ºgbar!")
        return True
        
    except ImportError as e:
        print(f"‚ùå Sicherheitsfeature fehlt: {e}")
        return False

if __name__ == "__main__":
    print("Enhanced Security Tax Calculator Build System")
    print("=" * 50)
    
    # Check dependencies
    print("üì¶ √úberpr√ºfe Abh√§ngigkeiten...")
    
    try:
        import PyInstaller
        print("‚úÖ PyInstaller verf√ºgbar")
    except ImportError:
        print("‚è≥ Installiere PyInstaller...")
        subprocess.run([sys.executable, "-m", "pip", "install", "pyinstaller"], check=True)
    
    try:
        import cryptography
        print(f"‚úÖ Cryptography {cryptography.__version__} verf√ºgbar")
    except ImportError:
        print("‚è≥ Installiere Cryptography...")
        subprocess.run([sys.executable, "-m", "pip", "install", "cryptography"], check=True)
    
    # Test security features
    if not test_security_features():
        print("‚ùå Sicherheitsfeatures nicht verf√ºgbar!")
        sys.exit(1)
    
    # Build the application
    success = build_secure_tax_calculator()
    
    if success:
        print("\nüéâ Enhanced Security Tax Calculator ist bereit!")
        print("\nüîí Sicherheitsfeatures:")
        print("   ‚Ä¢ AES-256 Verschl√ºsselung")
        print("   ‚Ä¢ Scrypt + PBKDF2 Key Derivation")
        print("   ‚Ä¢ 1.000.000+ Iterationen")
        print("   ‚Ä¢ 32-Byte Salt")
        print("   ‚Ä¢ Integrit√§tspr√ºfung")
        print("   ‚Ä¢ Rate Limiting")
        print("   ‚Ä¢ Timing Attack Schutz")
        
        if sys.platform == "win32":
            print("\nü™ü Windows: Doppelklick auf TaxCalculatorSecure.exe")
        elif sys.platform == "darwin":
            print("\nüçé macOS: Doppelklick auf TaxCalculatorSecure.app")
        else:
            print("\nüêß Linux: ./TaxCalculatorSecure")
            
    else:
        print("\n‚ùå Build fehlgeschlagen. Bitte √ºberpr√ºfen Sie die Fehlermeldungen.")
        sys.exit(1) 